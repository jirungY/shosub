const colorMap = {
  'purple': '#eb7cff',
  'red': '#ff8383',
  'orange': '#ff9759',
  'blue': '#83e6ff',
  'yellow': '#ede264',
  'green': '#6dd45d',
  'pink': '#e382c0'
};

!function(a, b) {
    "object" === typeof exports && "undefined" !== typeof module ? module.exports = b() : "function" === typeof define && define.amd ? define(b) : (a = "undefined" !== typeof globalThis ? globalThis : a || self,
    a.YoutubeExternalSubtitle = b())
}(this, function() {
    "use strict";
    var a = function() {
        return a = Object.assign || function(a) {
            for (var b, c = 1, d = arguments.length; c < d; c++) {
                b = arguments[c];
                for (var e in b)
                    Object.prototype.hasOwnProperty.call(b, e) && (a[e] = b[e])
            }
            return a
        }
        ,
        a.apply(this, arguments)
    }
      , b = function() {
        function a() {
            this.window = null,
            this.document = null,
            this.YT = null,
            this.initService = null
        }
        return a.prototype.setWindow = function(a) {
            this.window = a
        }
        ,
        a.prototype.getWindow = function() {
            return this.window
        }
        ,
        a.prototype.setDocument = function(a) {
            this.document = a
        }
        ,
        a.prototype.getDocument = function() {
            return this.document
        }
        ,
        a.prototype.setYT = function(a) {
            this.YT = a
        }
        ,
        a.prototype.getYT = function() {
            return this.YT
        }
        ,
        a.prototype.setInitService = function(a) {
            this.initService = a
        }
        ,
        a.prototype.getInitService = function() {
            return this.initService
        }
        ,
        a
    }()
      , c = new b
      , d = {
        ID: "youtube-external-subtitle-style",
        CLASS: "youtube-external-subtitle",
        FULLSCREEN: "fullscreen",
        FULLSCREEN_IGNORE: "fullscreen-ignore"
    }
      , e = function(a) {
        for (var b = a.getElementsByTagName("script"), c = 0; c < b.length; c++) {
            var d = b[c].src;
            if (d && -1 !== d.indexOf("youtube.com/iframe_api"))
                return !0
        }
        return !1
    }
      , f = function(a) {
        var b = a.createElement("script");
        b.src = "https://www.youtube.com/iframe_api";
        var c = a.getElementsByTagName("script")[0];
        c.parentNode.insertBefore(b, c)
    }
      , g = function(a) {
        e(a) || f(a)
    }
      , h = function(a) {
        return !(!a.YT || !a.YT.Player)
    }
      , i = function(a, b) {
        if (a())
            return void b();
        var c = setInterval(function() {
            a() && (clearInterval(c),
            b())
        }, 100)
    }
      , j = function(a) {
        return a.fullscreenElement || a.webkitFullscreenElement || a.webkitCurrentFullScreenElement || a.mozFullScreenElement || a.msFullscreenElement
    }
      , k = function(a) {
        var b = c.getInitService();
        return b.getSubtitles().filter(function(b) {
            return b.isInContainer(a)
        })
    }
      , l = function(a) {
        if (!a)
            return null;
        if (a.youtubeExternalSubtitle)
            return a.youtubeExternalSubtitle;
        var b = k(a);
        return b.length > 0 ? b[0] : null
    }
      , m = function() {
        for (var a = c.getDocument(), b = j(a), d = !!b, e = l(b), f = k(a), g = 0, h = f; g < h.length; g++) {
            var i = h[g];
            i.setIsFullscreenActive(d ? e === i : null)
        }
    }
      , n = function(a) {
        return !!a.getElementById(d.ID)
    }
      , o = function(a) {
        var b = a.createElement("style");
        b.id = d.ID,
        b.type = "text/css",
        b.innerHTML = "\n    ." + d.CLASS + " { position: absolute; display: none; z-index: 0; pointer-events: none; color: #fff; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-weight: normal; font-size: 17px; text-align: center; }\n    ." + d.CLASS + " span { background: #000; background: rgba(0, 0, 0, 0.9); padding: 1px 4px; display: inline-block; margin-bottom: 2px; }\n    ." + d.CLASS + "." + d.FULLSCREEN_IGNORE + " { display: none !important; }\n    ." + d.CLASS + "." + d.FULLSCREEN + " { z-index: 3000000000; }\n  ";
        var c = a.getElementsByTagName("head")[0] || a.documentElement;
        c.insertBefore(b, c.firstChild),
        a.addEventListener("fullscreenchange", m),
        a.addEventListener("webkitfullscreenchange", m),
        a.addEventListener("mozfullscreenchange", m),
        a.addEventListener("MSFullscreenChange", m)
    }
      , p = function() {
        function a() {
            this.subtitles = []
        }
        return a.prototype.getSubtitles = function() {
            return this.subtitles
        }
        ,
        a.prototype.addSubtitle = function(a) {
            this.subtitles.push(a)
        }
        ,
        a.prototype.removeSubtitle = function(a) {
            var b = this.subtitles.indexOf(a);
            -1 !== b && this.subtitles.splice(b, 1)
        }
        ,
        a.prototype.grantIframeApi = function(a) {
            if (null !== c.getYT())
                return void a();
            var b = c.getWindow()
              , d = c.getDocument();
            i(function() {
                return h(b)
            }, function() {
                c.setYT(b.YT),
                a()
            }),
            g(d)
        }
        ,
        a.prototype.grantGlobalStyles = function() {
            var a = c.getDocument();
            n(a) || o(a)
        }
        ,
        a
    }()
      , q = function(a) {
        c.setWindow(a),
        c.setDocument(a.document),
        c.setInitService(new p)
    }
      , r = function(a) {
        return Math.floor(a / 10)
    }
      , s = function(a, b) {
        for (var c = [], d = r(b), e = r(a); e <= d; e++)
            c.push(e);
        return c
    }
      , t = function(a) {
        for (var b = {}, c = 0, d = a; c < d.length; c++)
            for (var e = d[c], f = 0, g = s(e.start, e.end); f < g.length; f++) {
                var h = g[f];
                b[h] || (b[h] = []),
                b[h].push(e)
            }
        return b
    }
      , u = function(a, b) {
        if (!b)
            return null;
        var c = b[r(a)];
        if (!c)
            return null;
        for (var d = 0, e = c; d < e.length; d++) {
            var f = e[d];
            if (a >= f.start && a <= f.end)
                return f
        }
        return null
    }
      , v = function(a, b) {
        var c = a.indexOf("#")
          , d = "";
        -1 !== c && (d = a.substr(c),
        a = a.substr(0, c));
        var e = a.indexOf("?")
          , f = "";
        -1 !== e && (f = a.substr(e),
        a = a.substr(0, e));
        for (var g = 0, h = Object.keys(b); g < h.length; g++) {
            var i = h[g];
            f += "" + ("" === f ? "?" : "&") + i + "=" + b[i]
        }
        return "" + a + f + d
    }
      , w = function(a) {
        var b = a;
        return -1 === b.indexOf("enablejsapi=1") && (b = v(b, {
            enablejsapi: "1"
        })),
        -1 === b.indexOf("html5=1") && (b = v(b, {
            html5: "1"
        })),
        -1 === b.indexOf("playsinline=1") && (b = v(b, {
            playsinline: "1"
        })),
        -1 === b.indexOf("fs=") && (b = v(b, {
            fs: "0"
        })),
        b
    }
      , x = function(a, b) {
        var d = c.getDocument()
          , e = d.createElement("div");
        return e.youtubeExternalSubtitle = b,
        a.parentNode.insertBefore(e, a.nextSibling),
        e
    }
      , y = function(a, b) {
        for (var c = 0, d = Object.keys(b); c < d.length; c++) {
            var e = d[c];
            if (a[e] !== b[e])
                return !0
        }
        return !1
    }
      , z = function(a) {
        var b = [d.CLASS];
        return null !== a && b.push(a ? d.FULLSCREEN : d.FULLSCREEN_IGNORE),
        b.join(" ")
    }
      , A = function(a) {
        if (null === a)
            return "";
        for (var b = a.split(/\r\n|\r|\n/), c = "", d = 0; d < b.length; d++) {
            for (var e = b[d].split("|"), f = "", g = 0; g < e.length; g++) {
                var h = "white";
//                 ~e[g].indexOf("Orange:") ? (h = "#C3552B",
//                 e[g] = e[g].replace("Orange: ", "")) : ~e[g].indexOf("Red:") ? (h = "#df4355",
//                 e[g] = e[g].replace("Red: ", "")) : ~e[g].indexOf("Blue:") ? (h = "#348EC7",
//                 e[g] = e[g].replace("Blue: ", "")) : ~e[g].indexOf("Yellow:") ? (h = "#D4AF37",
//                 e[g] = e[g].replace("Yellow: ", "")) : ~e[g].indexOf("Purple:") ? (h = "#A660A7",
//                 e[g] = e[g].replace("Purple: ", "")) : ~e[g].indexOf("Pink:") && (h = "#ffbdf4",
//                 e[g] = e[g].replace("Pink: ", "")),
//                 f += '<span style="color:' + h + ';">' + e[g] + "</span>"
              
              if (e[g].includes(`<br/>`)) {
                let [sub1, sub2] = e[g].split(`<br/>`);
                const findedColor1 = Object.entries(colorMap).find(([key, color]) => {
                  const matched = sub1.match(/\{\{(.+)\}\}/i);
                  if (!matched) return false;
                  return matched[1].toLowerCase() === key.toLowerCase();
                });
                if (findedColor1) {
                  const [key, color] = findedColor1;
                  h = color;
                  const matched = sub1.match(/\{\{(.+)\}\}/);
                  sub1 = sub1.replace(`{{${matched[1]}}}`, '');
                }
                f += `<span><span style="color: ${h} ;">${sub1}</span><br/>`;
                
                h = "white";
                
                const findedColor2 = Object.entries(colorMap).find(([key, color]) => {
                  const matched = sub2.match(/\{\{(.+)\}\}/i);
                  if (!matched) return false;
                  return matched[1].toLowerCase() === key.toLowerCase();
                });
                if (findedColor2) {
                  const [key, color] = findedColor2;
                  h = color;
                  const matched = sub2.match(/\{\{(.+)\}\}/);
                  sub2 = sub2.replace(`{{${matched[1]}}}`, '');
                }
                f += `<span style="color: ${h} ;">${sub2}</span></span>`;
              } else {
                const findedColor = Object.entries(colorMap).find(([key, color]) => {
                  const matched = e[g].match(/\{\{(.+)\}\}/i);
                  if (!matched) return false;
                  return matched[1].toLowerCase() === key.toLowerCase();
                });
                if (findedColor) {
                  const [key, color] = findedColor;
                  h = color;
                  const matched = e[g].match(/\{\{(.+)\}\}/);
                  e[g] = e[g].replace(`{{${matched[1]}}}`, '');
                }
                f += `<span style="color: ${h} ;">${e[g]}</span>`
              }
            }
            c += "<br>" + f
        }
        return c.replace("<br>", "")
    }
      , B = function(a, b) {
        var c = a.offsetHeight;
        return {
            x: a.offsetLeft - a.scrollLeft + a.clientLeft,
            y: a.offsetTop - a.scrollTop + a.clientTop,
            width: a.offsetWidth,
            height: c,
            bottomPadding: b ? 60 : 20
        }
    }
      , C = function(a, b, c, d, e) {
        if (a.className = z(c),
        a.innerHTML = A(d),
        a.style.display = null === d ? "" : "block",
        b) {
            var f = B(b.getIframe(), e);
            a.style.visibility = "hidden",
            a.style.top = f.y + "px",
            a.style.left = f.x + "px",
            a.style.maxWidth = f.width - 20 + "px",
            a.style.fontSize = f.height / 395 + "em",
            a.style.top = f.y + f.height - f.bottomPadding - a.offsetHeight + "px",
            a.style.left = f.x + (f.width - a.offsetWidth) / 2 + "px",
            a.style.visibility = ""
        }
    }
      , D = function() {
        function b(a, b, d) {
            var e = this;
            if (void 0 === b && (b = []),
            void 0 === d && (d = null),
            this.cache = null,
            this.timeChangeInterval = 0,
            this.controlsHideTimeout = 0,
            this.player = null,
            this.videoId = null,
            this.element = null,
            this.renderMethod = null,
            this.state = {
                text: null,
                isFullscreenActive: null,
                controlsVisible: !0
            },
            this.onTimeChange = function() {
                var a = u(e.player.getCurrentTime(), e.cache);
                e.setState({
                    text: a ? a.text : null
                })
            }
            ,
            this.onControlsHide = function() {
                e.setState({
                    controlsVisible: !1
                })
            }
            ,
            this.onPlayerReady = function() {
                e.videoId = e.getCurrentVideoId()
            }
            ,
            this.onPlayerStateChange = function(a) {
                if (e.videoId === e.getCurrentVideoId()) {
                    var b = c.getYT();
                    a.data === b.PlayerState.PLAYING ? e.start() : a.data === b.PlayerState.PAUSED ? e.stop() : a.data === b.PlayerState.ENDED && (e.stop(),
                    e.setState({
                        text: null
                    }))
                }
            }
            ,
            a.youtubeExternalSubtitle)
                throw new Error("YoutubeExternalSubtitle: subtitle is already added for this element");
            a.youtubeExternalSubtitle = this;
            var f = w(a.src);
            a.src !== f && (a.src = f),
            this.load(b),
            this.element = x(a, this),
            this.renderMethod = null === d ? C : d;
            var g = c.getInitService();
            g.grantGlobalStyles(),
            g.addSubtitle(this),
            this.render(),
            g.grantIframeApi(function() {
                var b = c.getYT();
                e.player = new b.Player(a),
                e.player.addEventListener("onReady", e.onPlayerReady),
                e.player.addEventListener("onStateChange", e.onPlayerStateChange)
            })
        }
        return b.prototype.load = function(a) {
            this.cache = t(a)
        }
        ,
        b.prototype.setIsFullscreenActive = function(a) {
            this.setState({
                isFullscreenActive: a
            })
        }
        ,
        b.prototype.destroy = function() {
            this.stop(),
            this.element.parentNode.removeChild(this.element),
            this.player.getIframe().youtubeExternalSubtitle = null,
            this.player.removeEventListener("onReady", this.onPlayerReady),
            this.player.removeEventListener("onStateChange", this.onPlayerStateChange);
            var a = c.getInitService();
            a.removeSubtitle(this)
        }
        ,
        b.prototype.render = function() {
            this.renderMethod(this.element, this.player, this.state.isFullscreenActive, this.state.text, this.state.controlsVisible)
        }
        ,
        b.prototype.isInContainer = function(a) {
            return a.contains(this.element) || a === this.element
        }
        ,
        b.prototype.getYTPlayer = function() {
            return this.player
        }
        ,
        b.prototype.setState = function(b) {
            var c = this.state
              , d = a(a({}, c), b);
            y(c, d) && (this.state = d,
            this.render())
        }
        ,
        b.prototype.start = function() {
            this.stop();
            var a = c.getWindow();
            this.timeChangeInterval = a.setInterval(this.onTimeChange, 500),
            this.controlsHideTimeout = a.setTimeout(this.onControlsHide, 3e3),
            this.onTimeChange()
        }
        ,
        b.prototype.stop = function() {
            var a = c.getWindow();
            a.clearInterval(this.timeChangeInterval),
            a.clearTimeout(this.controlsHideTimeout),
            this.setState({
                controlsVisible: !0
            })
        }
        ,
        b.prototype.getCurrentVideoId = function() {
            return this.player.getVideoData().video_id
        }
        ,
        b
    }();
    q(window);
    var E = {
        Subtitle: D
    };
    return E
});
